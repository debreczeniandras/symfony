<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class ProjectServiceContainer extends Container
{
    protected $parameters = [];

    public function __construct()
    {
        $this->services = $this->privates = [];
        $this->methodMap = [
            'from_callable' => 'getFromCallableService',
            'has_configurator' => 'getHasConfiguratorService',
            'has_factory' => 'getHasFactoryService',
            'with_closure' => 'getWithClosureService',
        ];

        $this->aliases = [];
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    protected function createProxy($class, \Closure $factory)
    {
        return $factory();
    }

    /**
     * Gets the public 'from_callable' shared service.
     *
     * @return \Testing\NamedClosure\NamedClosureInterface
     */
    protected static function getFromCallableService($container, $lazyLoad = true)
    {
        return $container->services['from_callable'] = new class(fn () => 'Testing\\NamedClosure\\NamedClosureClass') extends \Symfony\Component\DependencyInjection\Argument\LazyClosure implements \Testing\NamedClosure\NamedClosureInterface { public function theMethod() { return $this->service->getInstance(...\func_get_args()); } };
    }

    /**
     * Gets the public 'has_configurator' shared service.
     *
     * @return \Testing\NamedClosure\NamedClosureClass
     */
    protected static function getHasConfiguratorService($container)
    {
        $container->services['has_configurator'] = $instance = new \Testing\NamedClosure\NamedClosureClass();

        \Testing\NamedClosure\NamedClosureClass::configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'has_factory' shared service.
     *
     * @return \Testing\NamedClosure\NamedClosureClass
     */
    protected static function getHasFactoryService($container)
    {
        return $container->services['has_factory'] = \Testing\NamedClosure\NamedClosureClass::getInstance();
    }

    /**
     * Gets the public 'with_closure' shared service.
     *
     * @return \Testing\NamedClosure\NamedClosureClass
     */
    protected static function getWithClosureService($container)
    {
        return $container->services['with_closure'] = new \Testing\NamedClosure\NamedClosureClass(\dirname(...));
    }
}
